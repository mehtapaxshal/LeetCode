/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        stack<int>s1,s2;
        ListNode *final=NULL,*prev=NULL;
        ListNode *temp1=l1,*temp2=l2;
        int len1=0,len2=0,min=0;
        int m1=0,m2=0;      //store popped elements
        int carry=0;        //store carry
        int result=0;       //store sum
        
        //find length of both linked lists
        while(temp1!=NULL)
        {
            len1++;
            temp1=temp1->next;
        }
        
        while(temp2!=NULL)
        {
            len2++;
            temp2=temp2->next;
        }
        
        //if both are of different lengths, then push 0 onto the corresponding stack initially
        min=len1-len2;
        if(min>0)
        {
            while(min!=0)
            {
                s2.push(0);
                min--;
            }
        }else
        {
            while(min!=0)
            {
                s1.push(0);
                min++;
            }
        }
        
        //push the remaining elements onto the stack
        while(l1!=NULL)
        {
            s1.push(l1->val);
            l1=l1->next;
        }
        while(l2!=NULL)
        {
            s2.push(l2->val);
            l2=l2->next;
        }
        
        //pop the elements and add both values and mark carry
        while(s2.empty()!=true && s1.empty()!=true)
        {
            m1=s1.top();
            m2=s2.top();
            s1.pop();
            s2.pop();
            result=m1+m2+carry;
            carry=0;
            if(result>=10)
            {
                result=result%10;
                carry=1;
            }
            
            final = new ListNode(result);
            final->next=prev;
            prev=final;
        }
        
        //if carry is present for last sum, add that carry into the list
        if(carry==1)
        {
            final = new ListNode(carry);
            final->next=prev;
            prev=final;
        }
        
        
        return final;
    }
};
