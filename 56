/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:

    static bool waytoSort(const Interval& i1, const Interval& i2)
    {
        return (i1.start < i2.start);
            
    }
    vector<Interval> merge(vector<Interval>& intervals) {
        
        stack <Interval> s1;
        vector<Interval> result;

        if(intervals.size() == 0)
            return result;
        
        sort(intervals.begin(),intervals.end(),waytoSort);
        
        s1.push(intervals[0]);
        
        for(int i=1;i<intervals.size();i++)
        {
            Interval temp = s1.top();
            
            if(intervals[i].start <= temp.end)
            {
                if(intervals[i].end > temp.end)
                {
                    s1.pop();
                    temp.end = intervals[i].end;
                    s1.push(temp);
                }
            }else
                s1.push(intervals[i]);
        }
        
        int i= s1.size()-1;
        result.resize(i+1);
        while(!s1.empty())
        {
            result[i]=s1.top();
            s1.pop();
            i--;
        }
        
        return result;
    }
};
